# -*- coding: utf-8 -*-
"""Demanda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bcizW9OM1L4IwlIVkhFjQ5ANtt477D3Y
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import plotly.express as px
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df = pd.read_csv("Dados.csv")

df

# Remover linhas duplicadas, e salva em outra variável
df_unicos = df.drop_duplicates()
# Remover linhas duplicadas no próprio dataframe
df.drop_duplicates(inplace=True)
# Remove linhas com dados faltantes
df_unicos.dropna(inplace=True)

df_unicos

# Tamanho da base de dados
df.shape

# Nome das colunas
df.columns

# Tipos de dados
df.info()

plt.figure(figsize=(8,8))
plt.title('Preço')
plt.plot(df_unicos['Vendas'])
plt.xlabel('Data')

# DADOS e LABEL
x = np.array(df["Data"]).reshape(-1, 1) # Alteração apenas pq só temos 1 feature
y = df_unicos["Vendas"]

# TREINO e TESTE
x_train, x_test, y_train, y_test = train_test_split(x,
                                                    y,
                                                    test_size=0.3,
                                                    random_state=42)

# Treina o modelo
reta = LinearRegression()
reta.fit(x_train, y_train)

y_pred = reta.predict(x_test)

# Avaliar o modelo
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE: {mse}")
print(f"MAE: {mae}")
print(f"R²: {r2}")

plt.scatter(x_test, y_test, label="Observações")
plt.plot(x_test, y_pred, color="red", label="Modelo")
plt.xlabel("Pontuação média dos treinamentos")
plt.ylabel("Números de treinamentos")
plt.title("Relação entre a pontuação média e o número de treinamentos")
plt.legend()
plt.show()

x_train = x_train.reshape(x_train.shape[0], x_train.shape[1],1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1],1)

Vendas = 'Vendas'
pred_dias=[]
i = 0
n_diasfut= 5
while(i<n_diasfut):
    if(len('Vendas' > x)):
      x= np.array('Vendas'[1:])
      x= x.reshape(1,-1)
      x= x.reshape(1, x, 1)
      pred = model.predict(x, verbose=0)
      Vendas.extend(pred[0].tolist())
      Vendas='Vendas'[1:]
      pred_dias.extend(pred.tolist())
      i=i+1
    else:
      x= x.reshape((1, x, 1))
      pred = model.predict(x, verbose= 0)
      Vendas.extend(pred[0].tolist())
      pred_dias.extend(pred.tolist())
      i=i+1